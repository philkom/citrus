<?xml version="1.0" encoding="UTF-8"?>
<chapter id="schema-validation">
    <title>XML schema validation</title>
    
    <para>There are several possibilities to describe the structure of XML documents. The two most popular ways are DTD 
    (Document type definition) and XSD (XML Schema definition). Once a XML document has decided to be classified using a schema 
    definition the structure of the document has to fit the predefined rules inside the schema definition. XML document instances 
    are valid only in case they meet all these structure rules defined in the schema definition. 
    Currently Citrus can validate XML documents using the schema languages DTD and XSD.</para>

    <section id="xsd-validation">
        <title>XSD validation</title>
        
        <para>Citrus handles XML schema definitions in order to validate incoming XML documents. Consequential the message receiving 
        actions have to know the respective XML schema (*.xsd) file resources to do so. This is done through a central schema repository
        which holds all available XML schema files for a project.</para>
        
        <programlisting>&lt;bean id=&quot;schemaRepository&quot; 
         class=&quot;com.consol.citrus.xml.XsdSchemaRepository&quot;&gt;
    &lt;property name=&quot;schemas&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
                &lt;property name=&quot;xsd&quot; 
                     value=&quot;classpath:citrus/flightbooking/TravelAgencySchema.xsd&quot;/&gt;
            &lt;/bean&gt;
            &lt;bean class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
                &lt;property name=&quot;xsd&quot; 
                     value=&quot;classpath:citrus/flightbooking/AirlineSchema.xsd&quot;/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        
        <para>By convention the schema repository instance is defined in the Citrus Spring configuration with the id "schemaRepository".
        Spring is then able to inject this schema repository instance into every message receiving action. The receiving action receives 
        XML messages and will ask the repository for a matching schema definition file in order to validate the document structure.</para>
        
        <para>The connection between XML messages and xsd schema files is done with the target namespace that is defined inside the schema
        definition. The target namespace of the schema definition will match the namespace of the root element in the received XML message.
        Using this central schema repository you do not have to wire XML messages and schema files together every time. This is done
        automatically over the target namespace.</para>
        
        <important>
            <para>In case Citrus receives a classified XML message using namespaces Citrus will try to validate the structure of the message 
            by default. Consequently you will also get errors in case no matching schema definition file is found inside the schema 
            repository. So if you explicitly do not want to validate the XML schema for some reason you have to disable the validation
            explicitly in your test.</para>
            
            <programlisting>&lt;receive with=&quot;getCustomerRequestReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:RequestTag&quot; 
             value=&quot;${requestTag}&quot;/&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:CorrelationId&quot; 
             value=&quot;${correlationId}&quot;/&gt;
        &lt;namespace prefix=&quot;ns2&quot; value=&quot;http://testsuite/default&quot;/&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;Operation&quot; value=&quot;GetCustomer&quot;/&gt;
        &lt;element name=&quot;RequestTag&quot; value=&quot;${requestTag}&quot;/&gt;
    &lt;/header&gt;
&lt;/receive&gt;</programlisting>
            
            <para>This way might sound annoying for you but in our opinion it is very important to validate the structure of the received 
            XML messages, so disabling the schema validation should not be the standard for all tests. Disabling automatic schema validation
            should only apply to special situations.</para>
        </important>
    </section>
    
    <section id="dtd-validation">
        <title>DTD validation</title>
        
        <para>XML DTD (Document type definition) is another way to validate the structure of a XML document. Many people say that DTD is
        deprecated and XML schema is the much more efficient way to describe the rules of a XML structure. We do not disagree with that, but
        we also know that legacy systems might still use DTD. So in order to avoid validation errors we have to deal with DTD validation
        as well.</para>
        
        <para>First thing you can do about DTD validation is to specify an inline DTD in your expected message template.</para>
        
        <programlisting>&lt;receive with=&quot;getTestMessageReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;data&gt;
        &lt;![CDATA[
            &lt;!DOCTYPE root [
                &lt;!ELEMENT root (message)&gt;
                &lt;!ELEMENT message (text)&gt;
                &lt;!ELEMENT text (#PCDATA)&gt;
                ]&gt;
            &lt;root&gt;
                &lt;message&gt;
                    &lt;text&gt;Hello TestFramework!&lt;/text&gt;
                &lt;/message&gt;
            &lt;/root&gt;
        ]]&gt;
        &lt;data/&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>
        
        <para>The system under test may also send the message with a inline DTD definition. So validation will succeed.</para>
        
        <para>In most cases the DTD is referenced as external .dtd file resource. You can do this in your expected message 
        template as well.</para>
        
        <programlisting>&lt;receive with=&quot;getTestMessageReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;data&gt;
        &lt;![CDATA[
            &lt;!DOCTYPE root SYSTEM 
                         &quot;com/consol/citrus/validation/example.dtd&quot;&gt;
            &lt;root&gt;
                &lt;message&gt;
                    &lt;text&gt;Hello TestFramework!&lt;/text&gt;
                &lt;/message&gt;
            &lt;/root&gt;
        ]]&gt;
        &lt;data/&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>
    </section>
</chapter>