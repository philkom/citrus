<?xml version="1.0" encoding="UTF-8"?>
<chapter id="testsuite">
    <title>Testsuite</title>

    <para>Tests often need to be grouped to test suites. Test suites also provide the functionality to do some work before and after the
    tests are run. Database preparing and cleaning tasks or server starting and stopping fit well into these initialization and cleanup phases 
    of a test suite. In Citrus a test suite is typically defined as Spring bean inside a XML configuration file.</para>
    
    <section id="testsuite-tasks">
        <title>Tasks before, between and after the test run</title>
        
        <para>A tester can execute several actions before and after test suites, as well as before and after test cases. See the next code example, 
        to find out how it works:</para>
        
        <programlisting>&lt;bean name=&quot;integrationTests&quot; class=&quot;com.consol.citrus.TestSuite&quot;/&gt;
    
&lt;bean class=&quot;com.consol.citrus.BeforeSuite&quot;&gt;
    &lt;property name=&quot;actions&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                &lt;property name=&quot;statements&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;CREATE TABLE TEST_TABLE (TEST_COLUMN char(250))&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
            [...]
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean class=&quot;com.consol.citrus.BeforeTest&quot;&gt;
    &lt;property name=&quot;actions&quot;&gt;
        &lt;list&gt;
            &lt;ref bean=&quot;purgeJmsQueues&quot;&gt;
            [...]
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean class=&quot;com.consol.citrus.AfterTest&quot;&gt;
    &lt;property name=&quot;actions&quot;&gt;
        &lt;list&gt;
            &lt;bean name=&quot;printTestFinished&quot; class=&quot;com.consol.citrus.actions.EchoAction&quot;&gt;
                &lt;property name=&quot;message&quot; value=&quot;************** Test finished **************&quot;/&gt;
            &lt;/bean&gt;
            [...]
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean class=&quot;com.consol.citrus.AfterSuite&quot;&gt;
    &lt;property name=&quot;actions&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                &lt;property name=&quot;ignoreErrors&quot; value=&quot;true&quot;/&gt;
                &lt;property name=&quot;statements&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;DROP TABLE TEST_TABLE&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
            [...]
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        
        <para>For this case Citrus offers four beans, to specify, when the actions are executed:</para>
        
        <itemizedlist mark="opencircle">
            <listitem>
                com.consol.citrus.BeforeSuite<para>List of actions will be executed before the first test is run</para>
            </listitem>
            <listitem>
                com.consol.citrus.BeforeTest<para>List of actions will be executed before every test</para>
            </listitem>
            <listitem>
                com.consol.citrus.AfterTest<para>List of actions will be executed after every test</para>
            </listitem>
            <listitem>
                com.consol.citrus.AfterSuite<para>List of actions will be executed after the last test has ended</para>
            </listitem>
        </itemizedlist>
        
        <para>This four task-sections are supposed to be used for initializing(before) and finishing(after) tasks. 
        All these tasks can easily be adjusted by adding or removing beans of the type TestAction inside the &lt;list&gt; element.</para>
        
        <tip>
            <para>The framework offers special startup and shutdown actions that may start and stop server implementations. This might 
            be helpful when dealing with Http servers or WebService containers like Jetty. You can also think of starting/stopping a 
            JMS broker.</para>
            
            <para>A test suite run may require the test environment to be clean. Therefore it is a good idea to purge all JMS destinations
            or clean up the database to avoid errors caused by obsolete data from previous test runs.</para>
            
            <para>Between the tests it also might sound reasonable to purge all JMS queues. In case a test fails the use case processing stops
            and some messages might be left in some JMS queues. The next test then will be confronted with these invalid messages. Purging all JMS
            destinations between the tests is therefore a good idea.</para>
        </tip>
    </section>
</chapter>