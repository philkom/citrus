<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-groovy">
    <title>Groovy support</title>

    <para>Groovy is an agile dynamic language for the Java Platform. Groovy ships with a lot of 
    very powerful features and fits perfectly with Java as it is based on Java and runs
    inside the JVM.</para>
    
    <para>The Citrus Groovy support might be the entrance for you to write customized test actions. 
    You can easily execute Groovy code inside a test case, just like a normal test action. The 
    whole test context with all variables is available to the Groovy action. This means someone
    can change variable values or create new variables very easily.</para>
    
    <para>Lets have an example to show the possible Groovy code interactions in Citrus:</para>
    
    <programlisting>
  &lt;testcase name=&quot;groovyTest&quot;&gt;
      &lt;variables&gt;
          &lt;variable name=&quot;time&quot; value=&quot;citrus:currentDate()&quot;/&gt;
      &lt;/variables&gt;
      &lt;actions&gt;
          &lt;groovy&gt;
              println 'Hello TestSuite'
          &lt;/groovy&gt;
          &lt;groovy&gt;
              println 'The variable is: ${time}'
          &lt;/groovy&gt;
          &lt;groovy&gt;
              &lt;![CDATA[
                  import com.consol.citrus.*
                  import com.consol.citrus.variable.*
                  import com.consol.citrus.context.TestContext
                  import com.consol.citrus.script.GroovyAction.ScriptExecutor
                  
                  public class GScript implements ScriptExecutor {
                      public void execute(TestContext context) {
                          println context.getVariable(&quot;time&quot;)
                      }
                  }
              ]]&gt;
          &lt;/groovy&gt;
          &lt;groovy&gt;
              context.setVariable(&quot;hello&quot;,&quot;Hello TestSuite&quot;)
              println context.getVariable(&quot;hello&quot;)
          &lt;/groovy&gt;
          &lt;groovy resource=&quot;classpath:com/consol/citrus/script/example.groovy&quot;/&gt;
      &lt;/actions&gt;
  &lt;/testcase&gt;
    </programlisting>
    
    <para>As you can see it is possible to write Groovy code directly into the test case. 
    Citrus will execute the Groovy code and handle variable references automatically. The tester 
    is also able, to write whole Groovy classes. He just needs to implement the ScriptExecutor interface. 
    This interface defines the execute method and provides access to the TestContext and its test variables. 
    Citrus will take care of the TestContext injection as a method parameter.</para>
    
    <para>Since version 1.2-SNAPSHOT it is also possible, to use the TestContext without defining a new class in
    the Groovy code.</para>
    
    <para>The last test action in our example refers to an external Groovy file resource. The external
    resource holds the Groovy code that is included into the test action chain.</para>
</section>