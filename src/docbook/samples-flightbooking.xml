<?xml version="1.0" encoding="UTF-8"?>
<section id="samples-flightbooking">
    <title>The FlightBooking sample</title>
    
    <para>A simple project example should give you the idea how Citrus works. The system under test is a flight booking service that 
    handles travel requests from a travel agency. A travel request consists of a complete travel route including several flights. The 
    FlightBookingService application will split the complete travel booking into separate flight bookings that are sent to the respective
    airlines in charge. The booking and customer data is persisted in a database.</para>
    
    <para>The airlines will confirm or deny the flight bookings. The FlightBookingService application consolidates all incoming flight 
    confirmations and combines them to a complete travel confirmation or denial that is sent back to the travel agency. Next picture
    tries to put the architecture into graphics:</para>
    
    <para>
      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center" display="block" fileref="images/samples/flightbooking/architecture_overview.jpg" format="JPG" />
        </imageobject>
        
        <imageobject role="html">
          <imagedata align="center" display="block" fileref="images/samples/flightbooking/architecture_overview.jpg" format="JPG" />
        </imageobject>
      </mediaobject>
    </para>
    
    <para>In our example two different airlines are connected to the FlightBookingService application: the SmartAriline over JMS and
    the RoyalAirline over Http.</para>
    
    <section id="samples-flightbooking-usecase">
        <title>The use case</title>
        
        <para>The use case that we would like to test is quite simple. The test should handle a simple travel booking and expect a positive
        processing to the end. The test case neither simulates business errors nor technical problems. Next picture shows the use case
        as a sequence diagram.</para>
        
        <para>
          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" display="block" fileref="images/samples/flightbooking/sequence_diagram.jpg" format="JPG" />
            </imageobject>
            
            <imageobject role="html">
              <imagedata align="center" display="block" fileref="images/samples/flightbooking/sequence_diagram.jpg" format="JPG" />
            </imageobject>
          </mediaobject>
        </para>
        
        <para>The travel agency puts a travel booking request towards the system. The travel booking contains two seperate flights. The
        flight requests are published to the airlines (SmartAirline and RoyalAirline). Both airlines confirm the flight bookings with a positive
        answer. The consolidated travel booking response is then sent back to the travel agency.</para>
    </section>
    
    <section id="samples-flightbooking-configuration">
        <title>Configure the simulated systems</title>
        
        <para>Citrus simulates all surrounding applications in their behavior during the test. The simulated applications are:
        TravelAgency, SmartAirline and RoyalAirline. The simulated systems have to be configured in the Citrus configuration first.
        The configuration is done in Spring XML configuration files, as Citrus uses Spring to glue all its services together.</para>
        
        <para>First of all we have a look at the TravelAgency configuration. The TravelAgency is using JMS to connect to our tested system, so
        we need to configure this JMS connection in Citrus.</para>
        
        <programlisting>&lt;bean name=&quot;connectionFactory&quot; 
         class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;
    &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot; /&gt;
&lt;/bean&gt;

&lt;citrus:jms-message-sender id=&quot;travelAgencyBookingRequestSender&quot; 
                      destination-name=&quot;${travel.agency.request.queue}&quot;/&gt;

&lt;citrus:jms-message-receiver id=&quot;travelAgencyBookingResponseReceiver&quot; 
                      destination-name=&quot;${travel.agency.response.queue}&quot;/&gt;</programlisting>
        
        <para>This is all Citrus needs to send and receive messages over JMS in order to simulate the TravelAgency. By default all JMS message
        senders and receivers need a connection factory. Therefore Citrus is searching for a bean named "connectionFactory". In the example
        we connect to a ActiveMQ message broker. A connection to other JMS brokers like TIBCO EMS or IBM Websphere MQ is possible too by
        simply changing the connection factory implementation.</para>
        
        <para>The identifiers of the message senders and receivers are very important. We should think of suitable ids that give the
        reader a first hint what the sender/receiver is used for. As we want to simulate the TravelAgency in combination with sending
        booking requests our id is "travelAgencyBookingRequestSender" for example.</para>
        
        <para>The sender and receivers do also need a JMS destination. Here the destination names are provided by property expressions.
        The Spring IoC container resolves the properties for us. All we need to do is publish the property file to the Spring container
        like this.</para>
        
        <programlisting>&lt;bean name=&quot;propertyLoader&quot; 
   class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
    &lt;property name=&quot;locations&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;citrus.properties&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;
&lt;/bean&gt;</programlisting>
        
        <para>The citrus.properties file is located in our project's resources folder and defines the actual queue names besides
        other properties of course:</para>
        
        <programlisting>#JMS queues
travel.agency.request.queue=Travel.Agency.Request.Queue
travel.agency.response.queue=Travel.Agency.Response.Queue
smart.airline.request.queue=Smart.Airline.Request.Queue
smart.airline.response.queue=Smart.Airline.Response.Queue
royal.airline.request.queue=Royal.Airline.Request.Queue</programlisting>
        
        <para>What else do we need in our Spring configuration? There are some basic beans that are commonly defined in a Citrus
        application but I do not want to bore you with these details. So if you want to have a look at the "citrus-context.xml" 
        file in the resources folder and see how things are defined there.</para>
        
        <para>We continue with the first airline to be configured the SmartAirline. The SmartAirline is also using JMS to communicate
        with the FlightBookingService. So there is nothing new for us, we simply define additional JMS message senders and receivers.</para>
        
        <programlisting>&lt;citrus:jms-message-receiver id=&quot;smartAirlineBookingRequestReceiver&quot; 
                      destination-name=&quot;${smart.airline.request.queue}&quot;/&gt;

&lt;citrus:jms-message-sender id=&quot;smartAirlineBookingResponseSender&quot; 
                      destination-name=&quot;${smart.airline.response.queue}&quot;/&gt;</programlisting>
        
        <para>We do not define a new JMS connection factory because TravelAgency and SmartAirline are using the same message broker instance.
        In case you need to handle multiple connection factories simply define the connection factory with the attribute "connection-factory".</para>
        
        <programlisting>&lt;citrus:jms-message-receiver id=&quot;smartAirlineBookingRequestReceiver&quot; 
                            destination-name=&quot;${smart.airline.request.queue}&quot;
                            connection-factory=&quot;smartAirlineConnectionFactory&quot;/&gt;

&lt;citrus:jms-message-sender id=&quot;smartAirlineBookingResponseSender&quot; 
                          destination-name=&quot;${smart.airline.response.queue}&quot;
                          connection-factory=&quot;smartAirlineConnectionFactory&quot;/&gt;</programlisting>
    </section>
    
    <section id="samples-flightbooking-http">
        <title>Configure the Http adapter</title>
        
        <para>The RoyalAirline is connected to our system using Http request/response communication. This means we have to simulate a Http server
        in the test that accepts client requests and provides proper responses. Citrus offers a Http server implementation that will listen on a
        port for client requests. The adapter forwards incoming request to the test engine over JMS and receives a proper response that is 
        forwarded as a Http response to the client. The next picture shows this mechanism in detail.</para>
        
        <para>
          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" display="block" fileref="images/samples/flightbooking/http_adapter.jpg" format="JPG" />
            </imageobject>
            
            <imageobject role="html">
              <imagedata align="center" display="block" fileref="images/samples/flightbooking/http_adapter.jpg" format="JPG" />
            </imageobject>
          </mediaobject>
        </para>
        
        <para>The RoyalAirline adapter receives client requsts over Http and sends them over JMS to a message receiver as we alredy know it. The
        test engine validates the received request and provides a proper response back to the adapter. The adapter will transform the response 
        to Http again and publishes it to the calling client. Citrus offers these kind of adapters for Http and SOAP communication. By writing 
        your own adapters like this you will be able to extend Citrus so it works with protocols that are not supported yet.</para>
        
        <para>Let us define the Http adapter in the Spring configuration:</para>
        
        <programlisting>&lt;citrus-http:server id=&quot;royalAirlineHttpServer&quot; 
                       port=&quot;8091&quot; 
                       uri=&quot;/flightbooking&quot; 
                       message-handler=&quot;jmsForwardingMessageHandler&quot;/&gt;
        
&lt;bean id=&quot;jmsForwardingMessageHandler&quot; 
         class=&quot;com.consol.citrus.http.handler.JmsConnectingMessageHandler&quot;&gt;
    &lt;property name=&quot;destinationName&quot; value=&quot;${royal.airline.request.queue}&quot;/&gt;
    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;
    &lt;property name=&quot;replyTimeout&quot; value=&quot;2000&quot;/&gt;
&lt;/bean&gt;        
                    
&lt;citrus:jms-sync-message-receiver id=&quot;royalAirlineBookingRequestReceiver&quot; 
                            destination-name=&quot;${royal.airline.request.queue}&quot;/&gt;

&lt;citrus:jms-reply-message-sender id=&quot;royalAirlineBookingResponseSender&quot; 
                            reply-destination-holder=&quot;royalAirlineBookingRequestReceiver&quot;/&gt;</programlisting>
        
        <para>We need to configure a Http server instance with a port, a request URI and a message handler. We define the
        JMS forwarding message handler to handle request as described. In Addition to the message handler we also need synchrpnous JMS
        message sender and receiver instances. That's it! We are able to receive Http request in order to simulate the RoyalAirline
        application. What is missing now? The test case definition itself.</para>
    </section>
    
    <section id="samples-flightbooking-testcase">
        <title>The test case</title>
        
        <para>The test case definition is also a Spring configuration file. Citrus offers a customized XML syntax to define a test case.
        This XML test defining language is supposed to be easy to understand and more specific to the domain we are dealing with. Next listing
        shows the whole test case definition. Keep in mind that a test case defines every step in the use case. So we define sending and 
        receiving actions of the use case as described in the sequence diagram we saw earlier.</para>
        
        <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot; 
             xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot; 
             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
             xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
             http://www.citrusframework.org/schema/testcase 
             http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd&quot;&gt;
    &lt;testcase name=&quot;FlightBookingTest&quot;&gt;
        &lt;meta-info&gt;
            &lt;author&gt;Christoph Deppisch&lt;/author&gt;
            &lt;creationdate&gt;2009-04-15&lt;/creationdate&gt;
            &lt;status&gt;FINAL&lt;/status&gt;
            &lt;last-updated-by&gt;Christoph Deppisch&lt;/last-updated-by&gt;
            &lt;last-updated-on&gt;2009-04-15T00:00:00&lt;/last-updated-on&gt;
        &lt;/meta-info&gt;
        &lt;description&gt;
            Test flight booking service.
        &lt;/description&gt;
        &lt;variables&gt;
            &lt;variable name=&quot;correlationId&quot; 
                value=&quot;citrus:concat('Lx1x', 'citrus:randomNumber(10)')&quot;/&gt;
            &lt;variable name=&quot;customerId&quot; 
                value=&quot;citrus:concat('Mx1x', citrus:randomNumber(10))&quot;/&gt;
        &lt;/variables&gt;
        &lt;actions&gt;
            &lt;send with=&quot;travelAgencyBookingRequestSender&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;TravelBookingRequestMessage 
                          xmlns=&quot;http://www.consol.com/schemas/TravelAgency&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;customer&gt;
                            &lt;id&gt;${customerId}&lt;/id&gt;
                            &lt;firstname&gt;John&lt;/firstname&gt;
                            &lt;lastname&gt;Doe&lt;/lastname&gt;
                          &lt;/customer&gt;
                          &lt;flights&gt;
                            &lt;flight&gt;
                              &lt;flightId&gt;SM 1269&lt;/flightId&gt;
                              &lt;airline&gt;SmartAirline&lt;/airline&gt;
                              &lt;fromAirport&gt;MUC&lt;/fromAirport&gt;
                              &lt;toAirport&gt;FRA&lt;/toAirport&gt;
                              &lt;date&gt;2009-04-15&lt;/date&gt;
                              &lt;scheduledDeparture&gt;11:55:00&lt;/scheduledDeparture&gt;
                              &lt;scheduledArrival&gt;13:00:00&lt;/scheduledArrival&gt;
                            &lt;/flight&gt;
                            &lt;flight&gt;
                              &lt;flightId&gt;RA 1780&lt;/flightId&gt;
                              &lt;airline&gt;RoyalAirline&lt;/airline&gt;
                              &lt;fromAirport&gt;FRA&lt;/fromAirport&gt;
                              &lt;toAirport&gt;HAM&lt;/toAirport&gt;
                              &lt;date&gt;2009-04-15&lt;/date&gt;
                              &lt;scheduledDeparture&gt;16:00:00&lt;/scheduledDeparture&gt;
                              &lt;scheduledArrival&gt;17:10:00&lt;/scheduledArrival&gt;
                            &lt;/flight&gt;
                          &lt;/flights&gt;                                
                        &lt;/TravelBookingRequestMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationId&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
            &lt;/send&gt;
            
            &lt;receive with=&quot;smartAirlineBookingRequestReceiver&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;FlightBookingRequestMessage 
                          xmlns=&quot;http://www.consol.com/schemas/AirlineSchema&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;bookingId&gt;???&lt;/bookingId&gt;
                          &lt;customer&gt;
                            &lt;id&gt;${customerId}&lt;/id&gt;
                            &lt;firstname&gt;John&lt;/firstname&gt;
                            &lt;lastname&gt;Doe&lt;/lastname&gt;
                          &lt;/customer&gt;
                          &lt;flight&gt;
                            &lt;flightId&gt;SM 1269&lt;/flightId&gt;
                            &lt;airline&gt;SmartAirline&lt;/airline&gt;
                            &lt;fromAirport&gt;MUC&lt;/fromAirport&gt;
                            &lt;toAirport&gt;FRA&lt;/toAirport&gt;
                            &lt;date&gt;2009-04-15&lt;/date&gt;
                            &lt;scheduledDeparture&gt;11:55:00&lt;/scheduledDeparture&gt;
                            &lt;scheduledArrival&gt;13:00:00&lt;/scheduledArrival&gt;
                          &lt;/flight&gt;
                        &lt;/FlightBookingRequestMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                    &lt;ignore path=&quot;//:FlightBookingRequestMessage/:bookingId&quot;/&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationId&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
                &lt;extract&gt;
                    &lt;message path=&quot;//:FlightBookingRequestMessage/:bookingId&quot; 
                                variable=&quot;${smartAirlineBookingId}&quot;/&gt;
                &lt;/extract&gt;
            &lt;/receive&gt;
            
            &lt;send with=&quot;smartAirlineBookingResponseSender&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;FlightBookingConfirmationMessage 
                          xmlns=&quot;http://www.consol.com/schemas/AirlineSchema&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;bookingId&gt;${smartAirlineBookingId}&lt;/bookingId&gt;
                          &lt;success&gt;true&lt;/success&gt;
                          &lt;flight&gt;
                            &lt;flightId&gt;SM 1269&lt;/flightId&gt;
                            &lt;airline&gt;SmartAirline&lt;/airline&gt;
                            &lt;fromAirport&gt;MUC&lt;/fromAirport&gt;
                            &lt;toAirport&gt;FRA&lt;/toAirport&gt;
                            &lt;date&gt;2009-04-15&lt;/date&gt;
                            &lt;scheduledDeparture&gt;11:55:00&lt;/scheduledDeparture&gt;
                            &lt;scheduledArrival&gt;13:00:00&lt;/scheduledArrival&gt;
                          &lt;/flight&gt;
                        &lt;/FlightBookingConfirmationMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationId&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
            &lt;/send&gt;
            
            &lt;receive with=&quot;royalAirlineBookingRequestReceiver&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;FlightBookingRequestMessage 
                          xmlns=&quot;http://www.consol.com/schemas/FlightBooking/AirlineSchema&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;bookingId&gt;???&lt;/bookingId&gt;
                          &lt;customer&gt;
                              &lt;id&gt;${customerId}&lt;/id&gt;
                              &lt;firstname&gt;John&lt;/firstname&gt;
                              &lt;lastname&gt;Doe&lt;/lastname&gt;
                          &lt;/customer&gt;
                          &lt;flight&gt;
                            &lt;flightId&gt;RA 1780&lt;/flightId&gt;
                            &lt;airline&gt;RoyalAirline&lt;/airline&gt;
                            &lt;fromAirport&gt;FRA&lt;/fromAirport&gt;
                            &lt;toAirport&gt;HAM&lt;/toAirport&gt;
                            &lt;date&gt;2009-04-15&lt;/date&gt;
                            &lt;scheduledDeparture&gt;16:00:00&lt;/scheduledDeparture&gt;
                            &lt;scheduledArrival&gt;17:10:00&lt;/scheduledArrival&gt;
                          &lt;/flight&gt;
                        &lt;/FlightBookingRequestMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                    &lt;ignore path=&quot;//:FlightBookingRequestMessage/:bookingId&quot;/&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationId&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
                &lt;extract&gt;
                    &lt;message path=&quot;//:FlightBookingRequestMessage/:bookingId&quot; 
                                variable=&quot;${royalAirlineBookingId}&quot;/&gt;
                &lt;/extract&gt;
            &lt;/receive&gt;
            
            &lt;send with=&quot;royalAirlineBookingResponseSender&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;FlightBookingConfirmationMessage 
                          xmlns=&quot;http://www.consol.com/schemas/AirlineSchema&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;bookingId&gt;${royalAirlineBookingId}&lt;/bookingId&gt;
                          &lt;success&gt;true&lt;/success&gt;
                          &lt;flight&gt;
                            &lt;flightId&gt;RA 1780&lt;/flightId&gt;
                            &lt;airline&gt;RoyalAirline&lt;/airline&gt;
                            &lt;fromAirport&gt;FRA&lt;/fromAirport&gt;
                            &lt;toAirport&gt;HAM&lt;/toAirport&gt;
                            &lt;date&gt;2009-04-15&lt;/date&gt;
                            &lt;scheduledDeparture&gt;16:00:00&lt;/scheduledDeparture&gt;
                            &lt;scheduledArrival&gt;17:10:00&lt;/scheduledArrival&gt;
                          &lt;/flight&gt;
                        &lt;/FlightBookingConfirmationMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationid&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
            &lt;/send&gt;
            
            &lt;receive with=&quot;travelAgencyBookingResponseReceiver&quot;&gt;
                &lt;message&gt;
                    &lt;data&gt;
                      &lt;![CDATA[
                        &lt;TravelBookingResponseMessage 
                          xmlns=&quot;http://www.consol.com/schemas/TravelAgency&quot;&gt;
                          &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                          &lt;success&gt;true&lt;/success&gt;
                          &lt;flights&gt;
                            &lt;flight&gt;
                              &lt;flightId&gt;SM 1269&lt;/flightId&gt;
                              &lt;airline&gt;SmartAirline&lt;/airline&gt;
                              &lt;fromAirport&gt;MUC&lt;/fromAirport&gt;
                              &lt;toAirport&gt;FRA&lt;/toAirport&gt;
                              &lt;date&gt;2009-04-15&lt;/date&gt;
                              &lt;scheduledDeparture&gt;11:55:00&lt;/scheduledDeparture&gt;
                              &lt;scheduledArrival&gt;13:00:00&lt;/scheduledArrival&gt;
                            &lt;/flight&gt;
                            &lt;flight&gt;
                              &lt;flightId&gt;RA 1780&lt;/flightId&gt;
                              &lt;airline&gt;RoyalAirline&lt;/airline&gt;
                              &lt;fromAirport&gt;FRA&lt;/fromAirport&gt;
                              &lt;toAirport&gt;HAM&lt;/toAirport&gt;
                              &lt;date&gt;2009-04-15&lt;/date&gt;
                              &lt;scheduledDeparture&gt;16:00:00&lt;/scheduledDeparture&gt;
                              &lt;scheduledArrival&gt;17:10:00&lt;/scheduledArrival&gt;
                            &lt;/flight&gt;
                          &lt;/flights&gt;                                
                        &lt;/TravelBookingResponseMessage&gt;
                      ]]&gt;
                    &lt;/data&gt;
                &lt;/message&gt;
                &lt;header&gt;
                    &lt;element name=&quot;correlationId&quot; value=&quot;${correlationId}&quot;/&gt;
                &lt;/header&gt;
            &lt;/receive&gt;
            
        &lt;/actions&gt;
    &lt;/testcase&gt;
&lt;/spring:beans&gt;</programlisting>
        
        <para>Similar to a sequence diagram the test case describes every step of the use case. At the very beginning the test case gets
        name and its meta information. Following with the variable values that are used all over the test. Here it is the correlationId 
        and the customerId that are used as test variables. Inside message templates header values the variables are referenced several
        times in the test</para>
        
        <para><literal>&lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;</literal></para>
        <para><literal>&lt;id&gt;${customerId}&lt;/id&gt;</literal></para>
        
        <para>The sending/receiving actions use a previously defined message sender/receiver. This is the link between test case and basic 
        Spring configuration we have done before.</para>
        
        <para><literal>&lt;send with=&quot;travelAgencyBookingRequestSender&quot;&gt;</literal></para>
        
        <para>The sending action chooses a message sender to actually send the message using a message transport (JMS, Http, SOAP, etc.).
        After sending this first "TravelBookingRequestMessage" request the test case expects the first "FlightBookingRequestMessage" 
        message on the SmartAirline JMS destination. In case this message is not arriving in time the test will fail with errors.
        In positive case our FlightBookingService works well and the message arrives in time. The received message is validated against
        a defined expected message template. Only in case all content validation steps are successful the test continues with the action
        chain. And so the test case proceeeds and works through the use case until every message is sent respectively received and 
        validated. The use case is done automatically without human interaction. Citrus simulates all surrounding applications and 
        provides detailed validation possibilities of messages.</para>
    </section>
    
</section>