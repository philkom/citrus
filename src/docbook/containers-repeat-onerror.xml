<?xml version="1.0" encoding="UTF-8"?>
<section id="containers-repeat-onerror">
    <title>Repeat on error until true</title>

    <para>The next looping container is called repeat-on-error-until-true. This container repeats a group of actions 
    in case one embedded action failed with error. In case of an error inside the container the loop will try 
    to execute <literal>all</literal> embedded actions again in order to seek for overall success. The execution continues
    until all embedded actions were processed successfully <literal>or</literal> the ending condition evaluates to true and the
    error-loop will lead to final failure.</para>

    <programlisting>&lt;testcase name=&quot;iterateTest&quot;&gt;
    &lt;actions&gt;
        &lt;repeat-onerror-until-true index=&quot;i&quot; condition=&quot;i = 5&quot;&gt;
            &lt;echo&gt;
                &lt;message&gt;index is: ${i}&lt;/message&gt;
            &lt;/echo&gt;
            &lt;fail/&gt;
        &lt;/repeat-onerror-until-true&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>
    
    <para>In the code example the error-loop continues four times as the &lt;fail&gt; action definitely fails the test.
    During the fifth iteration The condition &quot;i=5&quot; evaluates to true and the loop breaks its processing leading to a
    final failure as the test actions were not successful.</para>
    
    <note>
        <para>The overall success of the test case depends on the error situation inside the repeat-onerror-until-true container. In case 
        the loop breaks because of failing actions and the loop will discontinue its work the whole test case is failing too. The error loop
        processing is successful in case all embedded actions were not raising any errors during an iteration.</para>
    </note>
    
    <para>The repeat-on-error container also offers an automatic sleep mechanism. This auto-sleep property will force the container to
    wait a given amount of time before executing the next iteration. We used this mechanism a lot when validating database entries. Let's say
    we want to check the existence of an order entry in the database. Unfortunately the system under test is not very performant and may 
    need some time to store the new order. This amount of time is not predictable, especially when dealing with different hardware on our test 
    environments (local testing vs. server testing). Following from that our test case may fail unpredictable only because of runtime 
    conditions.</para>
    
    <para>We can avoid unstable test cases that are based on these runtime conditions with the auto-sleep functionality.</para>
    
    <programlisting>&lt;repeat-onerror-until-true auto-sleep=&quot;1&quot; condition=&quot;i = 5&quot; index=&quot;i&quot;&gt;
    &lt;echo&gt;
        &lt;sql datasource=&quot;testDataSource&quot;&gt;
            &lt;statement&gt;
              SELECT COUNT(1) AS CNT_ORDERS 
              FROM ORDERS 
              WHERE CUSTOMER_ID='${customerId}'
            &lt;/statement&gt;
            &lt;validate column=&quot;CNT_ORDERS&quot; value=&quot;1&quot;/&gt;
        &lt;/sql&gt;
    &lt;/echo&gt;
&lt;/repeat-onerror-until-true&gt;</programlisting>
    
    <para>We surrounded the database check with a repeat-onerror container having the auto-sleep property set to 1 second. The repeat container
    will try to check the database up to five times with an automatic sleep of 1 second before every iteration. This gives the system under test
    up to five seconds time to store the new entry to the database. The test case is very stable and just fits to the hardware environment. On slow
    test environments the test may need several iterations to successfully read the database entry. On very fast environments the test may succeed
    right on the first try.</para>
    
    <para>So fast environments are not slowed down by static sleep operations and slower environments are still able to execute this test case
    with high stability.</para>
</section>