<?xml version="1.0" encoding="UTF-8"?>
<chapter id="functions">
    <title>Functions</title>

    <para>The test framework will offer several functions that are useful throughout the test execution. The
    functions will always return a string value that is ready for use as variable value or directly inside a text
    message.</para>
    
    <para>A set of functions is usually combined to a function library. The library has a prefix that will identify
    the functions inside the test case. The default test framework function library uses a default prefix (citrus).
    You can write your own function library using your own prefix in order to extend the test framework
    functionality whenever you want.</para>
    
    <para>The library is built in the Spring configuration and contains a set of functions that are of
    public use.</para>
    
    <programlisting>&lt;bean id=&quot;testFrameworkFunctionLibrary&quot; 
         class=&quot;com.consol.citrus.functions.FunctionLibrary&quot;&gt;
    &lt;property name=&quot;name&quot; value=&quot;testFrameworkFunctionLibrary&quot;/&gt;
    &lt;property name=&quot;prefix&quot; value=&quot;citrus:&quot;/&gt;
    &lt;property name=&quot;members&quot;&gt;
        &lt;map&gt;
          &lt;entry key=&quot;randomNumber&quot;&gt;
              &lt;bean class=&quot;com.consol.citrus.functions.RandomNumberFunction&quot;/&gt;
          &lt;/entry&gt;
          &lt;entry key=&quot;randomString&quot;&gt;
              &lt;bean class=&quot;com.consol.citrus.functions.RandomStringFunction&quot;/&gt;
          &lt;/entry&gt;
          ...
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
    
    <para>In the next chapters the default functions offered by the framework will be described in detail.</para>

    <section id="functions-concat">
        <title>citrus:concat()</title>
    
        <para>The function will combine several string tokens to a single string value. This means that you can combine
        a static text value with a variable value for instance. A first example should clarify the usage:</para>
        
        <programlisting>&lt;testcase name=&quot;concatFunctionTest&quot;&gt;
    &lt;variables&gt;
        &lt;variable name=&quot;date&quot; value=&quot;citrus:currentDate(yyyy-MM-dd)&quot; /&gt;
        &lt;variable name=&quot;text&quot; value=&quot;Hello Test Framework!&quot; /&gt;
    &lt;/variables&gt;
    &lt;actions&gt;
        &lt;echo&gt;
            &lt;message&gt;
                citrus:concat('Today is: ', ${date}, ' right!?')
            &lt;/message&gt;
        &lt;/echo&gt;
        &lt;echo&gt;
            &lt;message&gt;
                citrus:concat('Text is: ', ${text})
            &lt;/message&gt;
        &lt;/echo&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>
        
        <para>Please do not forget to mark static text with single quote signs. There is no limitation for string tokens to
        be combined.</para>
        
        <para><literal>citrus:concat('Text1', 'Text2', 'Text3', ${text}, 'Text5', … , 'TextN')</literal></para>
        
        <para>The function can be used wherever variables can be used. For instance when validating XML elements in
        the receive action.</para>
        
        <programlisting>&lt;message&gt;
    &lt;validate path=&quot;//element/element&quot; value=&quot;citrus:concat('Cx1x', ${generatedId})&quot;/&gt;
&lt;/message&gt;</programlisting>

    </section>
    
    <section id="functions-substring">
        <title>citrus:substring()</title>
        
        <para>The function will have three parameters.</para>
        
        <para>1. String to work on</para>
        <para>2. Starting index</para>
        <para>3. End index (optional)</para>

        <para>Let us have a look at a simple example for this function:</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;
        citrus:substring('Hello Test Framework', 6)
    &lt;/message&gt;
&lt;/echo&gt;
&lt;echo&gt;
    &lt;message&gt;
        citrus:substring('Hello Test Framework', 0, 5)
    &lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>Test Framework</emphasis></para>
        <para><emphasis>Hello</emphasis></para>
    </section>
    
    <section id="functions-string-length">
        <title>citrus:stringLength()</title>
        
        <para>The function will calculate the number of characters in a string representation and return the number.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:stringLength('Hello Test Framework')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>20</emphasis></para>
    </section>
    
    <section id="functions-translate">
        <title>citrus:translate()</title>
        
        <para>This function will replace regular expression matching values inside a string representation with a
        specified replacement string.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;
        citrus:translate('H.llo Test Fr.mework', '\.', 'a')
    &lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Note that the second parameter will be a regular expression. The third parameter will be a simple
        replacement string value.</para>
        
        <para>Function output:</para>
        <para><emphasis>Hello Test Framework</emphasis></para>
    </section>
    
    <section id="functions-substring-before">
        <title>citrus:substringBefore()</title>
        
        <para>The function will search for the first occurrence of a specified string and will return the substring before
        that occurrence. Let us have a closer look in a simple example:</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;
        citrus:substringBefore('Test/Framework', '/')
    &lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>In the specific example the function will search for the ‘/’ character and return the string before that index.</para>
        
        <para>Function output:</para>
        <para><emphasis>Test</emphasis></para> 
    </section>
    
    <section id="functions-substring-after">
        <title>citrus:substringAfter()</title>
    
        <para>The function will search for the first occurrence of a specified string and will return the substring after that
        occurrence. Let us clarify this with a simple example:</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;
        citrus:substringAfter('Test/Framework', '/')
    &lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Similar to the substringBefore function the ‘/’ character is found in the string. But now the remaining
        string is returned by the function meaning the substring after this character index.</para>
        
        <para>Function output:</para>
        <para><emphasis>Framework</emphasis></para>
    </section>
    
    <section id="functions-round">
        <title>citrus:round()</title>
        
        <para>This is a simple mathematic function that will round decimal numbers representations to their nearest non decimal
        number.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:round('3.14')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>3</emphasis></para>
    </section>
    
    <section id="functions-floor">
        <title>citrus:floor()</title>
        
        <para>This function will round down decimal number values.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:floor('3.14')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>3.0</emphasis></para>
    </section>
    
    <section id="functions-ceiling">
        <title>citrus:ceiling()</title>
        
        <para>Similar to floor function, but now the function will round up the decimal number values.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:ceiling('3.14')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>4.0</emphasis></para>
    </section>
    
    <section id="functions-random-number">
        <title>citrus:randomNumber()</title>
        
        <para>The random number function will provide you the opportunity to generate random number strings
        containing positive number letters. There is a singular Boolean parameter for that function describing
        whether the generated String should have leading zero letters or not. Default value for this padding flag
        will be true.</para>
    
        <para>Next example will show the function usage:</para>
        
        <programlisting>&lt;variables&gt;
    &lt;variable name=&quot;rndNumber1&quot; value=&quot;citrus:randomNumber(10)&quot;/&gt;
    &lt;variable name=&quot;rndNumber2&quot; value=&quot;citrus:randomNumber(10, true)&quot;/&gt;
    &lt;variable name=&quot;rndNumber3&quot; value=&quot;citrus:randomNumber(10, false)&quot;/&gt;
&lt;/variables&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>8954638765</emphasis></para>
        <para><emphasis>0006387650</emphasis></para>
        <para><emphasis>45638765</emphasis></para>
    </section>

    <section id="functions-random-string">
        <title>citrus:randomString()</title>
        
        <para>This function will generate a random string representation with a defined length. A second parameter for
        this function will define the case of the generated letters (UPPERCASE, LOWERCASE, MIXED)</para>
        
        <programlisting>&lt;variables&gt;
    &lt;variable name=&quot;rndString0&quot; value=&quot;${citrus:randomString(10)}&quot;/&gt;
    &lt;variable name=&quot;rndString1&quot; value=&quot;citrus:randomString(10)&quot;/&gt;
    &lt;variable name=&quot;rndString2&quot; value=&quot;citrus:randomString(10, UPPERCASE)&quot;/&gt;
    &lt;variable name=&quot;rndString3&quot; value=&quot;citrus:randomString(10, LOWERCASE)&quot;/&gt;
    &lt;variable name=&quot;rndString4&quot; value=&quot;citrus:randomString(10, MIXED)&quot;/&gt;
&lt;/variables&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>Hr546dfA65</emphasis></para>
        <para><emphasis>Ag3876det5</emphasis></para>
        <para><emphasis>4SDF87TR</emphasis></para>
        <para><emphasis>4tkhi7uz</emphasis></para>
        <para><emphasis>Vt567JkA32</emphasis></para>
    </section>
    
    <section id="functions-random-enum-value">
        <title>citrus:randomEnumValue()</title>
        <para>
              This function returns one of its supplied arguments. Furthermore you can specify a custom function
              with a preconfigured list of values (the enumeration). The funciton will randomly return an entry when called without arguments. 
              This promotes code reuse and facilitates refactoring.
        </para>
        <para>
              In the next sample the function is used to set a httpStatusCode variable to one of the given HTTP status codes (200, 401, 500)
        </para>
        <programlisting>&lt;variable name="httpStatusCode" value="citrus:randomEnumValue('200', '401', '500')" /&gt;</programlisting>
        <para>
            As mentioned before you can define a custom function for your very specific needs in order to easily manage a list of predefined values like this:
        </para>
        <programlisting>&lt;bean id="myCustomFunctionLibrary" class="com.consol.citrus.functions.FunctionLibrary"&gt;
&lt;property name="name" value="myCustomFunctionLibrary" /&gt;
&lt;property name="prefix" value="custom:" /&gt;
&lt;property name="members"&gt;
  &lt;map&gt;
    &lt;entry key="randomHttpStatusCode"&gt;
      &lt;bean class="com.consol.citrus.functions.core.RandomEnumValueFunction"&gt;
        &lt;property name="values"&gt;
          &lt;list&gt;
            &lt;value&gt;200&lt;/value&gt;
            &lt;value&gt;500&lt;/value&gt;
            &lt;value&gt;401&lt;/value&gt;
          &lt;/list&gt;
        &lt;/property&gt;
      &lt;/bean&gt;
    &lt;/entry&gt;
  &lt;/map&gt;
&lt;/property&gt;
&lt;/bean&gt;</programlisting>
        <para>
            We have added a custom function library with a custom function definition. The custom function "randomHttpStatusCode" randomly 
            chooses an HTTP status code each time it is called. Inside the test you can use the function like this:
        </para>
        <programlisting>&lt;variable name="httpStatusCode" value="custom:randomHttpStatusCode()" /&gt;</programlisting>
    </section> 
    
    <section id="functions-current-date">
        <title>citrus:currentDate()</title>
        
        <para>This function will definitely help you when accessing the current date. Some examples will show the
        usage in detail:</para>
        
        <programlisting>&lt;echo&gt;&lt;message&gt;citrus:currentDate()&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd'T'hh:mm:ss')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1y')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1M')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1d')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1h')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1m')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '+1s')&lt;/message&gt;&lt;/echo&gt;
&lt;echo&gt;&lt;message&gt;citrus:currentDate('yyyy-MM-dd HH:mm:ss', '-1y')&lt;/message&gt;&lt;/echo&gt;</programlisting>
        
        <para>Note that the currentDate function provides two parameters. First parameter describes the date format
        string. The second will define a date offset string containing year, month, days, hours, minutes or seconds
        that will be added or subtracted to or from the actual date value.</para>
        
        <para>Function output:</para>
        <para><emphasis>01.09.2009</emphasis></para>
        <para><emphasis>2009-09-01</emphasis></para>
        <para><emphasis>2009-09-01 12:00:00</emphasis></para>
        <para><emphasis>2009-09-01T12:00:00</emphasis></para>
    </section>
    
    <section id="functions-upper-case">
        <title>citrus:upperCase()</title>
        
        <para>This function converts any string to upper case letters.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:upperCase('Hello Test Framework')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>HELLO TEST FRAMEWORK</emphasis></para>
    </section>    
    
    <section id="functions-lower-case">
        <title>citrus:lowerCase()</title>
        
        <para>This function converts any string to lower case letters.</para>
        
        <programlisting>&lt;echo&gt;
    &lt;message&gt;citrus:lowerCase('Hello Test Framework')&lt;/message&gt;
&lt;/echo&gt;</programlisting>
        
        <para>Function output:</para>
        <para><emphasis>hello test framework</emphasis></para>
    </section>
    
    <section id="functions-average">
        <title>citrus:average()</title>
        
        <para>The function will sum up all specified number values and divide the result through the number of values.</para>
        
        <programlisting>&lt;variable name=&quot;avg&quot; value=&quot;citrus:average('3', '4', '5')&quot;/&gt;</programlisting>
        
        <para>avg = <emphasis>4.0</emphasis></para>
    </section>
    
    <section id="functions-minimum">
        <title>citrus:minimum()</title>
        
        <para>This function returns the minimum value in a set of number values.</para>
        
        <programlisting>&lt;variable name=&quot;min&quot; value=&quot;citrus:minimum('3', '4', '5')&quot;/&gt;</programlisting>
        
        <para>min = <emphasis>3.0</emphasis></para>
    </section>
    
    <section id="functions-maximum">
        <title>citrus:maximum()</title>
        
        <para>This function returns the maximum value in a set of number values.</para>
        
        <programlisting>&lt;variable name=&quot;max&quot; value=&quot;citrus:maximum('3', '4', '5')&quot;/&gt;</programlisting>
        
        <para>max = <emphasis>5.0</emphasis></para>
    </section>
    
    <section id="functions-sum">
        <title>citrus:sum()</title>
        
        <para>The function will sum up all number values. The number values can also be negative.</para>
        
        <programlisting>&lt;variable name=&quot;sum&quot; value=&quot;citrus:sum('3', '4', '5')&quot;/&gt;</programlisting>
        
        <para>sum = <emphasis>12.0</emphasis></para>
    </section>
    
    <section id="functions-absolute">
        <title>citrus:absolute()</title>
        
        <para>The function will return the absolute number value.</para>
        
        <programlisting>&lt;variable name=&quot;abs&quot; value=&quot;citrus:absolute('-3')&quot;/&gt;</programlisting>
        
        <para>abs = <emphasis>3.0</emphasis></para>
    </section>
    
    <section id="functions-map-value">
        <title>citrus:mapValue()</title>
        <para>
              This function implementation maps string keys to string values. This is very helpful when the used key is randomly chosen
              at runtime and the corresponding value ist not defined during the design time.
        </para>
        <para>
              The following function library defines a custom function for mapping HTTP status codes to the corresponding messages:
        </para>
        <programlisting>&lt;bean id="myCustomFunctionLibrary" class="com.consol.citrus.functions.FunctionLibrary"&gt;
  &lt;property name="name" value="myCustomFunctionLibrary" /&gt;
  &lt;property name="prefix" value="custom:" /&gt;
  &lt;property name="members"&gt;
    &lt;map&gt;
      &lt;entry key="getHttpStatusMessage"&gt;
        &lt;bean class="com.consol.citrus.functions.core.MapValueFunction"&gt;
          &lt;property name="values"&gt;
            &lt;map&gt;
              &lt;entry key="200" value="OK" /&gt;
              &lt;entry key="401" value="Unauthorized" /&gt;
              &lt;entry key="500" value="Internal Server Error" /&gt;
            &lt;/map&gt;
          &lt;/property&gt;
        &lt;/bean&gt;
      &lt;/entry&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        <para>
            In this example the function sets the variable httpStatusMessage to the 'Internal Server Error' string dynamically at runtime.
            The test only knows the HTTP status code and does not care about spelling and message locales.
        </para>
        <programlisting>&lt;variable name="httpStatusCodeMessage" value="custom:getHttpStatusMessage('500')" /&gt;</programlisting>
    </section> 
</chapter>
