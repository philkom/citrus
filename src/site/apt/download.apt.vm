 ------
 Download
 ------
 
Download Citrus

  Citrus ${project.version} is the latest stable release. Citrus may also come as snapshot version that is always kept up to date with the latest changes and bugfixes.
  Have a look at those snapshot releases and help us test and verify the latest changes!
  
~~  <<Latest snapshot release>>: ${project.version}
~~  
~~  The snapshot release keeps you up-to-date with the latest changes.
~~  
~~  * citrus-${project.version}-with-dependencies ({{{dist/citrus-${project.version}-with-dependencies.zip}zip}}/{{{dist/citrus-${project.version}-with-dependencies.tar.gz}tar.gz}})
~~  
~~  * citrus-${project.version}-src ({{{dist/citrus-${project.version}-src.zip}zip}}/{{{dist/citrus-${project.version}-src.tar.gz}tar.gz}})
~~  
~~  []
~~
  <<Latest stable release>>: 1.1
  
  Version 1.1 is the current stable release.
  
  * citrus-1.1-with-dependencies ({{{dist/citrus-1.1-with-dependencies.zip}zip}}/{{{dist/citrus-1.1-with-dependencies.tar.gz}tar.gz}})
  
  * citrus-1.1-src ({{{dist/citrus-1.1-src.zip}zip}}/{{{dist/citrus-1.1-src.tar.gz}tar.gz}})
  
  []
  
  <<Older versions>>

  Version 1.0 (Note: This version is licensed under GPLv3).
  
  * citrus-1.0-with-dependencies ({{{dist/citrus-1.0-with-dependencies.zip}zip}}/{{{dist/citrus-1.0-with-dependencies.tar.gz}tar.gz}})
  
  * citrus-1.0-src ({{{dist/citrus-1.0-src.zip}zip}}/{{{dist/citrus-1.0-src.tar.gz}tar.gz}})
  
  []
    
  The Citrus project requires JDK 1.5 (or newer version) to run.
  
Logging framework notice

  We use {{{http://www.slf4j.org}SLF4J}} as logging abstraction framework, which means that you as a user are not forced to use a specific
  logging implementation. SLF4J is similar to commons-logging, so you may use whatever logging framework you want to. All you have to do is 
  <<add an SLF4J logging implementation to your classpath>>. 
  
  In case you are currently using {{{http://logging.apache.org/log4j}log4j}} as logging framework just include slf4j-log4j12.jar 
  on your classpath and Citrus will use log4j too. If you want to use some other framework than please see the {{{http://www.slf4j.org}SLF4J}} 
  documentation for help.
  
Maven 2

  You can easily use Citrus in a Maven project by defining test-scoped dependencies. Simply add the ConSol Labs repository and 
  the following dependencies to your POM (pom.xml). See also our {{{tutorials/run-with-maven.html} Maven tutorial}} for a detailed description.

+---
  <repository>
    <id>consol-labs-release</id>
    <url>http://labs.consol.de/maven/repository/</url>
    <snapshots>
      <enabled>false</enabled>
    </snapshots>
    <releases>
      <enabled>true</enabled>
    </releases>
  </repository>
  <repository>
    <id>consol-labs-snapshots</id>
    <url>http://labs.consol.de/maven/snapshots-repository/</url>
    <snapshots>
      <enabled>true</enabled>
      <!-- Policy: always, daily, interval:xxx (xxx=#minutes, 60*24*7=10080), never -->
      <updatePolicy>10080</updatePolicy>
    </snapshots>
    <releases>
      <enabled>false</enabled>
    </releases>
  </repository>
+---
  
  The Citrus core module dependency.
  
+---
  <dependency>
    <groupId>com.consol.citrus</groupId>
    <artifactId>citrus-core</artifactId>
    <version>${project.version}</version>
    <scope>test</scope>
  </dependency>
+---
  
  In case you need Citrus modules add following dependencies. See also our {{{modules-introduction.html} modules section}} 
  for more information on Citrus modules:
  
+---
  <dependency>
    <groupId>com.consol.citrus</groupId>
    <artifactId>citrus-http</artifactId>
    <version>${project.version}</version>
    <scope>test</scope>
  </dependency>
+---
  
+---
  <dependency>
    <groupId>com.consol.citrus</groupId>
    <artifactId>citrus-ws</artifactId>
    <version>${project.version}</version>
    <scope>test</scope>
  </dependency>
+---
  
+---
  <dependency>
    <groupId>com.consol.citrus</groupId>
    <artifactId>citrus-tibco</artifactId>
    <version>${project.version}</version>
    <scope>test</scope>
  </dependency>
+---
  